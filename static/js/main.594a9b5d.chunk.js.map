{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","defaultProps","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","split","join","document","getElementById","select","navigator","clipboard","writeText","length","App","setMode","setAlert","message","setTimeout","bodyColor","body","textString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.594a9b5d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" href=\"#\">\r\n                About\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggleMode}\r\n            />\r\n            <label\r\n              className={`form-check-label text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// Declaring prop types for various properties.\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleLowerClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setText(\"\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"textBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied To Clipboard\", \"success\");\r\n  };\r\n\r\n  const handleUpperClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ] + /);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"Enter Your Text Here\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container mb-3\"\r\n        style={{\r\n          color: props.mode == \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <label htmlFor=\"textBox\" className=\"form-label\"></label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"textBox\"\r\n          rows=\"8\"\r\n          value={text}\r\n          onChange={handleOnChange}\r\n          style={{\r\n            backgroundColor: props.mode === \"light\" ? \"white\" : \"#02011d\",\r\n            color: props.mode === \"light\" ? \"#2b2f36\" : \"white\",\r\n          }}\r\n        ></textarea>\r\n        <button className=\"btn btn-primary my-1\" onClick={handleUpperClick}>\r\n          Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLowerClick}>\r\n          Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button className=\"btn btn-secondary\" onClick={handleCopy}>\r\n          copy\r\n        </button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n        className=\"container my-2\"\r\n      >\r\n        <p>\r\n          Total words: {text === \"\" ? 0 : text.split(\" \").length}, Total\r\n          characters: {text.length}, Total blank spaces:{\" \"}\r\n          {text.split(/\\s+/gi).length - 1},\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = {\r\n  heading: PropTypes.string,\r\n};\r\n","import Navbar from \"./components/Navbar\";\nimport \"./App.css\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      type: type,\n      message: message,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    let bodyColor = document.body.style;\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      bodyColor.backgroundColor = \"#02011d\";\n      showAlert(\"Dark Mode Enabled\", \"success\");\n      document.title = \"TextUtils-dark\";\n    } else {\n      setMode(\"light\");\n      bodyColor.backgroundColor = \"white\";\n      showAlert(\"Light Mode Enabled\", \"success\");\n      document.title = \"TextUtils-light\";\n    }\n  };\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n        {/* <Routes>\n          <Route\n            exact\n            path=\"/\"\n            element={\n              <TextForm\n                textString=\"Put Your Text Here\"\n                heading=\"Enter Your Text To Analyze\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            }\n          />\n          <Route exact path=\"about\" element={<About />} />\n        </Routes> */}\n        <TextForm\n          textString=\"Put Your Text Here\"\n          heading=\"Enter Your Text To Analyze\"\n          mode={mode}\n          showAlert={showAlert}\n        />\n        {/* <About /> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}